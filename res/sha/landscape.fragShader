#version 330

struct Attenuation{
	float constant;
	float linear;
	float exponent;
};

struct Light{
	vec3 pos;
	vec3 color;
	
	float intensity;
	Attenuation att;
	float reflectanceMod;
};

struct Material{
	vec3 specularColor;
	float specularPower;
	float reflectance;
};

uniform Light light1;
uniform Light light2;
uniform Light light3;

uniform vec3 u_skyLightDir;
uniform float u_skyLightIntens;
uniform float u_skyLightPow;

uniform Material material;

uniform sampler2D u_texture;

uniform vec3 u_cameraPos;

uniform int u_textureMode;

varying vec4 vColor;
varying vec2 vTexCoord; 
varying vec3 vNormal;
varying vec3 vTexture;
varying vec4 vPos;

vec4 diffuseColor;

vec4 calcPointLight(Light light, vec3 position, vec3 normal, vec4 texCol)
{
	vec3 camera_direction = normalize(u_cameraPos - position);
	if(dot(normal, camera_direction) < -0.1) discard;
	
	vec4 specColor = vec4(0, 0, 0, 0);
	vec3 light_direction = light.pos - position;
	
	// Attenuation
	float distance = length(light_direction);
	float attenuationInv = 1+light.att.constant + light.att.linear * distance +
	light.att.exponent * distance * distance;
	
	// Diffuse Light
	vec3 to_light_source = normalize(light_direction);
	float diffuseFactor = max(dot(normal, to_light_source), 0.0);
	diffuseColor += (vec4(light.color, 0) * light.intensity * diffuseFactor) / attenuationInv;
	// Specular Light
	vec3 from_light_source = -to_light_source;
	vec3 reflected_light = normalize(reflect(from_light_source, normal));
	float specularFactor = max(dot(camera_direction, reflected_light), 0.0);
	specularFactor = pow(specularFactor, material.specularPower);
	specColor = texCol * specularFactor * material.reflectance * light.reflectanceMod * 
	vec4(light.color*material.specularColor, 1.0);
	
	return specColor / attenuationInv;
}

vec4 getTextureRegion(int k){
	int k2 = k%4;
	k /= 4;
	return texture2D(u_texture, fract(vTexCoord) * 0.25 + vec2(k2, k) / 4.0);
}

void main() {
	diffuseColor = vec4(0, 0, 0, 0);
	vec4 texColor;
	if(u_textureMode == 0){
		texColor = texture2D(u_texture, vTexCoord) * vec4(vTexture, 1);
	}else{
		if(fract(vTexture.x)>0)
		texColor += getTextureRegion(int(vTexture.x)) * fract(vTexture.x)*2;
		if(fract(vTexture.y)>0)
		texColor += getTextureRegion(int(vTexture.y)) * fract(vTexture.y)*2;
		if(fract(vTexture.z)>0)
		texColor += getTextureRegion(int(vTexture.z)) * fract(vTexture.z)*2;
	}
	gl_FragColor = calcPointLight(light1, vPos.xyz, vNormal, texColor);
	gl_FragColor += vec4(texColor.xyz * diffuseColor.xyz, texColor.w);
	gl_FragColor += texColor * pow(max(0, dot(vNormal, u_skyLightDir)), u_skyLightPow) * u_skyLightIntens;
	//gl_FragColor.w = 1;
}